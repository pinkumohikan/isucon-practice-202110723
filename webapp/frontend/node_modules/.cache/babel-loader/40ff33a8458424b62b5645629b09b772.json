{"remainingRequest":"/opt/frontend/node_modules/thread-loader/dist/cjs.js!/opt/frontend/node_modules/babel-loader/lib/index.js!/opt/frontend/node_modules/eslint-loader/index.js??ref--13-0!/opt/frontend/src/services/http.js","dependencies":[{"path":"/opt/frontend/src/services/http.js","mtime":1621475513321},{"path":"/opt/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/opt/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"/opt/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nimport Router from \"../router.js\";\nvar API_BASE = \"\";\n\nvar ErrorHandler =\n/*#__PURE__*/\nfunction () {\n  function ErrorHandler() {\n    _classCallCheck(this, ErrorHandler);\n  }\n\n  _createClass(ErrorHandler, [{\n    key: \"handle\",\n    value: function handle(error) {\n      if (error.response.status == 401) {\n        Router.push({\n          path: '/login'\n        });\n        return;\n      }\n\n      if (error.response.data && error.response.data.message) {\n        alert(error.response.data.message);\n      }\n\n      console.log(error);\n      /*\n      if (error.response.status === 404) {\n          Router.push({ name: 'notfound' })\n      } else if (error.response.status === 401) {\n          Router.push({ name: 'login' })\n      } else if (error.response.status === 500) {\n          Router.push({ name: 'internalservererror' })\n      }\n      */\n    }\n  }]);\n\n  return ErrorHandler;\n}();\n/**\n * Axiosラッパー\n */\n\n\nexport var HttpService =\n/*#__PURE__*/\nfunction () {\n  function HttpService(apiBase) {\n    _classCallCheck(this, HttpService);\n\n    var svc = axios.create({\n      baseURL: apiBase,\n      timeout: 600 * 1000\n    });\n    this.svc = svc;\n  }\n  /**\n   * APIリクエスト共通処理\n   * @param {string} url URL\n   * @param {object} config axios設定\n   */\n\n\n  _createClass(HttpService, [{\n    key: \"request\",\n    value: function request(url) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // FIXME: トークン判定処理\n      return this.svc.request(url, config).then(function (response) {\n        // 正常レスポンスハンドリング\n        var resp = response.data;\n        resp.status = response.status;\n        return resp;\n      }, function (error) {\n        // エラーハンドリング\n        var hdl = new ErrorHandler();\n        hdl.handle(error);\n        return Promise.reject(error);\n      });\n    }\n    /**\n     * GETリクエスト送信\n     * @param {string} url\n     * @param {object} config\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      config.method = 'get';\n      return this.request(url, config);\n    }\n    /**\n     * POSTリクエスト送信\n     * @param {string} url\n     * @param {object} data POSTデータ\n     * @param {object} config\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, data) {\n      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      config.method = 'post';\n      config.data = data;\n      return this.request(url, config);\n    }\n    /**\n     * PUTリクエスト送信\n     * @param {string} url\n     * @param {object} data PUTデータ\n     * @param {object} config\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(url, data) {\n      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      config.method = 'put';\n      config.data = data;\n      return this.request(url, config);\n    }\n    /**\n     * DELETEリクエスト送信\n     * @param {string} url\n     * @param {object} config\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      config.method = 'delete';\n      return this.request(url, config);\n    }\n  }]);\n\n  return HttpService;\n}();\nexport var httpService = new HttpService(API_BASE);",null]}